Exercise: read three integers from user and print out the maximum of the three.
user_number_1 = int(input("enter the number ="))
 user_number_2 = int(input("enter the number ="))
user_number_3= int(input("enter the number ="))
if (user_number_1>user_number_2)  and (user_number_1>user_number_3):
    largest=user_number_1
elif (user_number_2>user_number_1) and (user_number_2>user_number_3):
    largest=user_number_2
else:
(user_number_3>user_number_1) and (user_number_3>user_number_2)
   largest= user_number_3
print ("the greatest number is =" +str(largest))


Exercise: read three integers from user and print out if these could be edges of  a right triangle
 x= int(input("x="))
y= int(input(" y="))
z = int(input("z="))
if(x*x == y*y + z*z):
  print ("xx= yy+ zz . Sides of right angle triangle")
elif(y*y==x*x+y*y):
   print("yy=xx+zz. Sides of right angle triangle")
elif(z*z==x*x+y*y):
    print("zz=xx+yy.  Sides of right angle triangle")
else:
    print("wrong!!")



Exercise: read one integer from user and print out the prime numbers between 2 and real number.

a= int(input(" Enter the number:"))
 
 
 
 class 
 class Student:
   def __init__(self, first_name, last_name, student_id):
       self.first_name = first_name
       self.last_name = last_name
       self.student_id = student_id

   def getbalance(selfself):
       return 200
   def getname(self):
       return self.first_name+" " + self.last_name
class CestarCollege:
    def __init__(self,address, manager):
        self.address = address
        self.manager = manager
student1= Student("Adam", "Jane","1234")
student2 = Student("Rickie", "Singh", "2345")
student3 = Student("Raman", "Grewal", "3456")
print(student1.first_name)
print(student2.student_id)

print (student1.getname())
print (student1.getbalance())

clas credit
class credit:
    def __init__(self, name, number, balance, limit, ):
        self.name = name
        self.number = number
        self.balance = balance
        self.limit = limit
        

    def getbalance(self):
       return 100
    def getname(self):
       return self.name
    def getnumber(self):
       return self.number
    def getlimit(self):
       return self.number
    def getlimit(self):
       return self.limit

name1 = credit("jone", "112233665544", "5000", "5000",)
name2 = credit("sam","114455889966", "6000","5000",)
name3 = credit("smith","885544779966","4000","600",)

print (name1.getname())
print (name1.getbalance())
print (name1.getnumber())
print (name2.getlimit())



class credit:
    def __init__(self, name, number, balance, limit, ):
        self.name = name
        self.number = number
        self.balance = balance
        self.limit = limit
    def swipe(self,amount):
        self.balance = self.balance + amount
    def paybalance(self,amount):
        self.balance = self.balance + amount
    def setlimit(self, nextlimit):
        self.limit= newlimit

    def getbalance(self):
        return self.balance

    def getname(self):
        return self.name

    def getnumber(self):
        return self.number

    def getlimit(self):
        return self.number

    def getlimit(self):
        return self.limit

name1 = credit("john", "546217", 545, 451)




 CLASS ACTIVITY ----------------------------------------------------------

from datetime import date
import datetime
from datetime import time   

class car:
    def __init__(self, model, make, purchase_price, sold_price, purchase_year, purchase_month, purchase_date,sold_year, sold_month, sold_date):
        self.model = model
        self.make = make
        self.purchase_price = purchase_price
        self.sold_price = sold_price
        self.year = purchase_year
        self.purchase_month = purchase_month
        self.purchase_date = purchase_date
        self.sold_year = sold_year
        self.sold_month = sold_month
        self.sold_date = sold_date

    def getmodel(self):
        return self.model
    def setmodel(self, newModel):
        self.model = newModel

    def getmake(self):
        return self.make
    def setmake(self, newMake):
        self.make = newMake

    def getpurchase_price(self):
        return self.purchase_price
    def setpurchase_price(self, newpurchase_price):
        self.purchase_price = newpurchase_price

    def getsold_price(self):
        return self.sold_price
    def setsold_price(self, newsold_price):
        self.sold_price = newsold_price

    def getpurchase_year(self):
            return self.year
    def setpurchase_year(self, newpurchase_year):
            self.purchase_year = newpurchase_year

    def getpurchase_month(self):
        return self.purchase_month
    def setpurchase_month(self, newpurchase_month):
        self.purchase_month = newpurchase_month

    def getpurchase_date(self):
        return self.purchase_month
    def setpurchase_date(self, newpurchase_date):
        self.purchase_date = newpurchase_date

    def getsold_year(self):
        return self.sold_year
    def setsold_year(self, newsold_year):
        self.sold_year = newsold_year

    def getsold_month(self):
        return self.sold_month
    def setsold_month(self, newsold_month):
        self.sold_month = newsold_month

    def getsold_date(self):
        return self.sold_date

    def setsold_date(self, newsold_date):
        self.sold_date = newsold_date


c1 = car(1998, "bmw", 20000, 18000, 2000, 10, 12, 2003, 05, 31)
c2 = car(2012, "mustang", 60000, 40000, 2015, 11, 13, 2007,5,19)
c3 = car(2015, "charger", 55000, 35000, 1105,20,15, 1307,20,17)
c4 = car(2016, "challenger", 50000, 36000, 1710,20,16, 2112,20,18)

print(c1.getmake())

car_sold_date = datetime.datetime(c1.getsold_year(), c1.getsold_month(), c1.getsold_date())
car_purchase_date = datetime.datetime(c1.getpurchase_year(), c1.getpurchase_month(), c1.getpurchase_date())

diff = car_sold_date - car_purchase_date

print(diff)





---------------------------------------------------------------------------------------
#class names must start with capital letter (only for first letter)
class Vehicle:
    #all variables must be small letters.
    #if variable consists of two names, then use '_', or set the first character of the second name  with capital.
    # example: x position or xPosition, but Xposition is wrong
    def __init__(self, xPos, yPos, id, number_of_bullets, xVelocity, yVelocity, isAlive):
        self.xPos = xPos
        self.yPos = yPos
        self.numberOfBullets = number_of_bullets
        self.id = id
        self.xV = xVelocity
        self.yV = yVelocity
        self.isValid = isAlive

    def moveTo(self, x, y):
        self.xPos = x
        self.yPos = y
        self.dispalyLocation()
        self.getStatus()

        
    def dispalyLocation(self):
        print("vehicle : " + str(self.id) + " Location: x= " + str(self.xPos) + ", y= " + str(self.yPos))

    def shoot(self):
        self.numberOfBullets -= 1

    def getStatus(self):
        print("-----------Status for vehicle: " + str(self.id) + "---------------------------" )
        print("Number of bullets: " + str(self.numberOfBullets))
        print("Location: x = " + str(self.xPos) + ", y = " + str(self.yPos))
        print("velocity: x = " + str(self.xV) + ", Velocity y = " + str(self.yV))
        print("Is Alive? " + str(self.isValid))



v1 = Vehicle(0, 0 , "T1" , 100, 2, 3, True)
v2 = Vehicle(100, 100, "T2", 100, 2, 3, True)
#print(v1.dispalyLocation())

for i in range (1, 100):
    v1.moveTo(i, i)
    v2.moveTo(100-i, 100-i)
