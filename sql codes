use AdventureWorks2012

select * from bramptondata 
where solddate < '2019/9/1'
order by solddate desc;

select * from bramptondata 
where solddate > '2019/9/1'
order by solddate desc;

select count(*) from bramptondata 
 where solddate >= '2019/9/1';
 
 select b.Type, avg([Sold Price]) from bramptondata as b 
group by b.Type
order by avg([Sold Price]) desc;

 select b.Type, Description, avg([Sold Price]) from bramptondata as b 
group by b.Type, Description
order by avg([Sold Price]) desc;

 select b.Type, Description, Bedroom, avg([Sold Price]) from bramptondata as b 
group by b.Type, Description, Bedroom
order by avg([Sold Price]) desc;

 select b.Type, Description, avg(Bedroom), avg([Sold Price]) from bramptondata as b 
group by b.Type, Description, Bedroom
order by avg([Sold Price]) desc;


 select count(b.Type) as type,Type, count(Description) as descp,Description, avg(Bedroom) bed, avg([Sold Price]) from bramptondata as b 
group by b.Type, Description, Bedroom
order by avg([Sold Price]) desc;

 select month(SoldDate) as sldmth, count(b.Type) as type,Type, count(Description) as descp,Description, avg(Bedroom) bed, avg([Sold Price]) from bramptondata as b 
group by b.Type, Description, Bedroom,SoldDate 
order by avg([Sold Price]) desc;

 select month(SoldDate) as sldmth,Type, Bedroom, avg([Sold Price])as soldprice from bramptondata as b 
group by month(SoldDate), b.Type, Description, Bedroom
order by month(SoldDate), avg([Sold Price]) desc;

select community, type, description, bedroom, Solddate, avg([Sold Price]) as AVGSoldPrice
from bramptondata
where Bedroom between 2 and 3
group by Solddate, community, type, description, bedroom
order by avg([Sold Price]) desc;

select bedroom, avg([Sold Price]) as AVGSoldPrice
from bramptondata
where Bedroom between 2 and 3
group by bedroom 
order by avg([Sold Price]) desc;

select community, type, description, bedroom, Solddate, avg([Sold Price]) as AVGSoldPrice
from bramptondata
where month(solddate) = 10
group by Solddate, community, type, description, bedroom
order by avg([Sold Price]) desc;

select community, type, description, bedroom, Solddate, count(SoldDate) as countSoldDate
from bramptondata
where month(solddate) between 9 and 10 
group by Solddate, community, type, description, bedroom
order by avg([Sold Price]) desc, solddate asc;

select * from tblDepartment
select * from tblEmployee
select * from tblTransaction

select * from tblTransaction as t
 inner join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber;

 select * from tblTransaction as t
 left join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber;


 select * from tblTransaction as t
 right join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber;

 select * from tblTransaction as t
  join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber;

 select * from tblTransaction as t
 inner join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber
 where EmployeeLastName like 'y%';

  select * from tblTransaction as t
 inner join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber
 where EmployeeLastName like '%y%';

  select * from tblTransaction as t
 inner join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber
 where EmployeeLastName like '%y%y%';

   select * from tblTransaction as t
 inner join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber
 where EmployeeLastName like '%a%a%t'

    select count(*) from tblTransaction as t
 inner join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber
 where EmployeeLastName like '%a%a%t'

    select * from tblTransaction as t
 inner join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber
 where EmployeeLastName like 'a%t'

select count(*), EmployeeLastName from tblTransaction as t
 inner join tblEmployee as e
 on e.EmployeeNumber = t.EmployeeNumber
 where EmployeeLastName like 'a%t'
 group by EmployeeLastName


 select * from tblTransaction as t 
 where EmployeeNumber in (126,127,128,129)
 order by EmployeeNumber

  select * from tblTransaction as t 
 where EmployeeNumber in (126,127,128,129) and year(dateoftransaction) = 2015
 order by EmployeeNumber;
 

   select * from tblTransaction as t 
 where EmployeeNumber in (126,127,128,129) or year(dateoftransaction) = 2015
 order by EmployeeNumber;

 select EmployeeNumber from tblEmployee where EmployeeLastName  like 'y%'

 select * from tblTransaction as t 
 where EmployeeNumber in
        ( select EmployeeNumber from tblEmployee where EmployeeLastName  like 'y%')
 order by EmployeeNumber;

  select * from tblTransaction as t 
 where EmployeeNumber in 
             ( select EmployeeNumber from tblEmployee where EmployeeLastName not like 'y%')
 order by EmployeeNumber;


   select * from tblTransaction as t 
 where EmployeeNumber not in 
         ( select EmployeeNumber from tblEmployee where EmployeeLastName like 'y%')
 order by EmployeeNumber;

  select * from tblTransaction as t 
 where EmployeeNumber = any
           ( select EmployeeNumber from tblEmployee where EmployeeLastName  like 'y%')
 order by EmployeeNumber;

   select * from tblTransaction as t 
 where EmployeeNumber <= any
           ( select EmployeeNumber from tblEmployee where EmployeeLastName  like 'y%')
 order by EmployeeNumber;

   select * from tblTransaction as t 
 where EmployeeNumber = some
           ( select EmployeeNumber from tblEmployee where EmployeeLastName  like 'y%')
 order by EmployeeNumber;


   select * from tblTransaction as t 
 where EmployeeNumber <> any
           ( select EmployeeNumber from tblEmployee where EmployeeLastName  like 'y%')
 order by EmployeeNumber;


   select * from tblTransaction as t 
 where EmployeeNumber <> all
           ( select EmployeeNumber from tblEmployee where EmployeeLastName  like 'y%')
 order by EmployeeNumber;


 select * from tblTransaction as t
 inner join (select * from tblEmployee where EmployeeLastName like 'y%') as e
 on e.EmployeeNumber = t.EmployeeNumber                                               
 order by t.EmployeeNumber
 -- derived table
 
 
 
 
 
 
 -----------------------------------27 nov 
 select*from shoes
select*from customersales

select customername, purchasedate, color, style, brandname from customersales
group by  customername, purchasedate, color, style, brandname

select*from sys.objects
where name like '%sales'
or name like '%shoes';

alter table shoes 
alter column price float not null

alter table shoes 
alter column color nvarchar(255) not null

alter table shoes 
alter column style nvarchar(255) not null


alter table shoes 
alter column brandname nvarchar(255) not null

alter table shoes
 add constraint PK_SalesRecord PRIMARY KEY (color, style, brandname)

alter table customersales 
alter column customername nvarchar(255) not null

alter table customersales 
alter column purchasedate nvarchar(255) not null

alter table customersales 
alter column color nvarchar(255) not null

alter table customersales 
alter column style nvarchar(255) not null

alter table customersales 
alter column brandname nvarchar(255) not null

alter table customersales
add constraint PK_CustomerRecord PRIMARY KEY (customername, purchasedate,color,style, brandname)

 alter table customersales
 drop constraint PK_CustomerRecord


alter table customersales
add constraint FK_SalesConstraint FOREIGN KEY (color,style, brandname)
  references shoes(color,style, brandname)
  on delete cascade
  on update cascade

select * from customersales
where customername = 'roy'

delete from customersales 
where customername ='Roy' and color = 'blue' and style ='formal' and brandname ='Nike.'

insert into customersales(customername, purchasedate,color,style, brandname) values('Roy','4/6/19','blue','formal','Nike.')
insert into customersales(customername, purchasedate,color,style, brandname) values('Roy','7/6/2020','blue','formal','Nike.')
insert into customersales(customername, purchasedate,color,style, brandname) values('jorge','29/11/2019', 'red' , 'formal', 'Air_Nike')
insert shoes(price,color,style, brandname) values('658', 'red' , 'formal', 'Air_Nike')


select sum(s.price) as TotalSalesPrice from shoes as s, customersales as c
where s.color = c.color and 
s.brandname = c.brandname and
s.style = c.style and 
month(c.purchasedate) between 2 and 4


select * from customersales as c, shoes as s
where c.brandname = s.brandname and 
c.color = s.color and 
c.style = s.style and
month(c.purchasedate) between 1 and 4; 

select * from customersales as c, shoes as s
where c.brandname = s.brandname and 
c.color = s.color and 
c.style = s.style and
upper(s.color) = upper('green')

select * from customersales as c, shoes as s
where c.brandname = s.brandname and 
c.color = s.color and 
c.style = s.style and
upper(c.customername) in ('John', 'Suzan')

--------------------------------------------------------------------------(dec4)
select * from lastyear

select * from thisyear


select address, avg(soldprice) from thisyear
where remarksforclients like '%pool%'
group by address


declare @PriceWithOutPool as float;
select  @PriceWithOutPool = avg(soldprice) from thisyear
where remarksforclients not like '%pool%'
print @PriceWithOutPool  


declare @PriceWithPool as float;
select  @PriceWithPool = avg(soldprice) from thisyear
where remarksforclients like '%pool%'
print @PriceWithPool 

print @PriceWithPool - @PriceWithOutPool





DECLARE @averageSellingPrice as INT;
DECLARE @sumSellingPrice as INT;
DECLARE @numberOfRecords as INT;
declare @soldprice as INT;
declare @community as varchar(40);
declare @type as varchar(12);
Set @numberOfRecords = 0;
DECLARE @dataCursor as Cursor;

SET @dataCursor = CURSOR for
select type, community, soldprice
from thisyear;

open @dataCursor
while @@Fetch_Status=0

BEGIN
PRINT @soldprice;
fetch next from @dataCursor into @type, @Community, @soldprice

END
print @numberOfRecords




DECLARE @averageSellingPrice as INT;
DECLARE @sumSellingPrice as INT;
DECLARE @numberOfRecords as INT;
declare @soldprice as INT;
declare @community as varchar(40);
declare @addresss as varchar(40);
declare @type as varchar(12);
Set @numberOfRecords = 0;
DECLARE @dataCursor as Cursor;

SET @dataCursor = CURSOR for
select type, community, soldprice, address
from thisyear;

open @dataCursor
while @@Fetch_Status=0

BEGIN
PRINT @soldprice;
PRINT @type;
PRINT @addresss;
fetch next from @dataCursor into @type, @Community, @soldprice, @addresss

END
print @numberOfRecords



DECLARE @averageSellingPrice as INT;
DECLARE @sumSellingPrice as INT;
DECLARE @numberOfRecords as INT;
declare @soldprice as INT;
declare @community as varchar(40);
declare @addresss as varchar(40);
declare @type as varchar(12);
Set @numberOfRecords = 0;
DECLARE @dataCursor as Cursor;

SET @dataCursor = CURSOR for
select type, community, soldprice, address
from thisyear;

open @dataCursor
while @@Fetch_Status=0

BEGIN
if @type = 'Detached'
PRINT @soldprice;
PRINT @type;
PRINT @addresss;
fetch next from @dataCursor into @type, @Community, @soldprice, @addresss

END
print @numberOfRecords


DECLARE @averageSellingPrice as INT;
DECLARE @sumSellingPrice as INT;
DECLARE @numberOfRecords as INT;
declare @soldprice as INT;
declare @community as varchar(40);
declare @addresss as varchar(40);
declare @type as varchar(12);
Set @numberOfRecords = 0;
Set @sumSellingPrice = 0;
DECLARE @dataCursor as Cursor;

SET @dataCursor = CURSOR for
select type, community, soldprice, address
from thisyear;

open @dataCursor
while @@Fetch_Status=0

BEGIN
 set @numberOfRecords = @numberOfRecords + 1
 if @type = 'detached'
--PRINT @soldprice;
--PRINT @type;
--PRINT @addresss;
set  @sumSellingPrice = @sumSellingPrice + @soldprice
fetch next from @dataCursor into @type, @Community, @soldprice, @addresss

END
print @sumSellingPrice
print @numberOfRecords
print @sumSellingPrice/@numberOfRecords
